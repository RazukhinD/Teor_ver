Задача 1
"""
Вероятность того, что стрелок попадет в мишень, выстрелив один раз, равна 0.8. Стрелок выстрелил 100 раз.
Найдите вероятность того, что стрелок попадет в цель ровно 85 раз.
"""

import numpy as np


# формула для вычисления сочетаний
def combinations(n, k):
    return np.math.factorial(n) // (np.math.factorial(k) * np.math.factorial(n - k))


# Используем биномиальное распределение
n1 = 100
k1 = 85
p = 0.8
q = 1 - p
pp = combinations(n1, k1) * pow(p, k1) * pow(q, n1-k1)  # находим вероятность того, что стрелок попадет в цель ровно 85 раз
print(round(pp, 3))
PP= 0,048062

Задача 2
"""
Вероятность того, что лампочка перегорит в течение первого дня эксплуатации, равна 0.0004.
В жилом комплексе после ремонта в один день включили 5000 новых лампочек. Какова вероятность,
что ни одна из них не перегорит в первый день? Какова вероятность, что перегорят ровно две?
"""
import math

import numpy as np

# используем распределение Пуассона
n = 5000
m = 0
p = 0.0004
lam = p * n

# вероятность,что ни одна из них не перегорит в первый день
pp = pow(lam, m) / np.math.factorial(m) * pow(math.e, -lam)
print(round(pp, 3))
РР = 0,1352

# вероятность, что перегорят ровно две
m1 = 2
pp1 = pow(lam, m1) / np.math.factorial(m1) * pow(math.e, -lam)
print(round(pp1, 3))
РР1=0,2704

Задача 3
"""
Монету подбросили 144 раза. Какова вероятность, что орел выпадет ровно 70 раз?
"""

import numpy as np


# формула для вычисления сочетаний
def combinations(n, k):
    return np.math.factorial(n) // (np.math.factorial(k) * np.math.factorial(n - k))


# Используем биномиальное распределение
n1 = 144
k1 = 70
p = 0.5
q = 1 - p
pp = combinations(n1, k1) * pow(p, k1) * pow(q, n1-k1)  # вероятность, что орел выпадет ровно 70 раз
print(round(pp, 3))
РР=0,0628

Задача 4
"""
В первом ящике находится 10 мячей, из которых 7 - белые. Во втором ящике - 11 мячей, из которых 9 белых.
Из каждого ящика вытаскивают случайным образом по два мяча. Какова вероятность того, что все мячи белые?
Какова вероятность того, что ровно два мяча белые? Какова вероятность того, что хотя бы один мяч белый?
"""

import numpy as np


# формула для вычисления сочетаний
def combinations(n, k):
    return np.math.factorial(n) // (np.math.factorial(k) * np.math.factorial(n - k))


# биномиальное распределение
def binomial(n, k, p, q):
    return combinations(n, k) * pow(p, k) * pow(q, n-k)


c1 = combinations(10, 2)  # количество сочетаний 2 мячей из 10 qse первого ящика
c2 = combinations(11, 2)  # количество сочетаний 2 мячей из 11 из второго ящика
p1 = 7 / 10  # вероятность вытащить белый мяч из первого ящика
q1 = 1 - p1  # обратная вероятность (1-p1)
p2 = 9 / 11  # вероятность вытащить белый мяч из второго ящика
q2 = 1 - p2  # обратная вероятность (1-p2)

# 1. вероятность того, что все мячи белые:
px1 = binomial(2, 2, p1, q1)
px2 = binomial(2, 2, p2, q2)
print(px1 * px2)
Ответ: 0,328016
# 2. вероятность того, что ровно два мяча белые
px3 = binomial(2, 1, p1, q1)  # вероятность вытащить 1 белый мяч, а один другого цвета из 1-го ящика
px4 = binomial(2, 1, p2, q2)  # вероятность вытащить 1 белый мяч, а один другого цвета из 2-го ящика
px31 = binomial(2, 0, p1, q1)  # вероятность вытащить 0 белых мячей из 1-го ящика
px41 = binomial(2, 0, p2, q2)  # вероятность вытащить 0 белых мячей из 2-го ящика

# варианты выпадения 2 белых мячей: 1) 2 белых мяча из 1-го ящика и 0 из 2-го;
# 2) 2 белых мяча из 2-го ящика и 0 из 1-го; 3) по одному белому мячу из каждого ящика
print(px1 * px41 + px2 * px31 + px3 * px4)
Ответ: 0,2014049

# 3. вероятность того, что хотя бы один мяч белый
print(px3 * px41 + px4 * px31 + px31 * px41)
Ответ: 0,0436363
